<?php

namespace Tests\Feature\Http\Controllers;

use App\Models\Vulnerability;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class VulnerabilityControllerTest extends TestCase
{
    use RefreshDatabase;
    public function test_it_should_show_all_vulnerabilities_paginated(): void
    {
        $response = $this->get('/api/vulnerabilities')->assertStatus(Response::HTTP_OK);
        $this->assertEquals(Vulnerability::query()->take(10)->get()->toArray(),$response->json()['data']);
    }

    public function test_it_should_show_specific_vulnerability(): void
    {
        $vulnerability = Vulnerability::query()->first();
        $response = $this->get('/api/vulnerabilities/'.$vulnerability->id)->assertStatus(Response::HTTP_OK);
        $this->assertEquals($vulnerability->toArray(),$response->json()['data']);
    }

    public function test_it_should_show_404_if_vulnerability_not_found_on_show(): void
    {
        $this->get('/api/vulnerabilities/0')->assertStatus(Response::HTTP_NOT_FOUND);
    }

    public function test_it_should_delete_specific_vulnerability(): void
    {
        $vulnerability = Vulnerability::query()->first();
        $response = $this->delete('/api/vulnerabilities/'.$vulnerability->id)->assertStatus(Response::HTTP_OK);
        $this->assertEquals('Vulnerability deleted!',$response->json()['data']);
        $this->assertEquals(9, Vulnerability::query()->count());
        $this->assertEquals(null, Vulnerability::query()->where('title', $vulnerability->title)->first());
    }

    public function test_it_should_show_404_if_vulnerability_not_found_on_delete(): void
    {
        $this->delete('/api/vulnerabilities/0')->assertStatus(Response::HTTP_NOT_FOUND);
    }

    /**
     * @dataProvider getRequiredFields
     */
    public function test_it_should_validate_required_fields_before_store_new_vulnerability($field, $fieldName): void
    {
        $this->post('/api/vulnerabilities')->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY)->assertJson([
            'errors' => [
                $field => [
                    __('validation.required', [
                        'attribute' => $fieldName,
                    ]),
                ],
            ],
        ]);
    }

    /**
     * @dataProvider getStringFields
     */
    public function test_it_should_validate_string_fields_before_store_new_vulnerability($field, $fieldName, $fieldValue): void
    {
        $this->post('/api/vulnerabilities', [$field => $fieldValue])->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY)->assertJson([
            'errors' => [
                $field => [
                    __('validation.string', [
                        'attribute' => $fieldName,
                    ]),
                ],
            ],
        ]);
    }

    private function getStringFields(): array
    {
        return [
            ['title', 'title', 123],
            ['title', 'title', [123]],
            ['title', 'title', ['123']],
            ['description', 'description', 123],
            ['description', 'description', [123]],
            ['description', 'description', ['123']]
        ];
    }

    private function getRequiredFields(): array
    {
        return [
            ['title', 'title'],
            ['description', 'description']
        ];
    }
}
