<?php

namespace Tests\Feature\Http\Controllers;

use App\Models\Vulnerability;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class VulnerabilityControllerTest extends TestCase
{
    use RefreshDatabase;
    public function test_it_should_show_all_vulnerabilities_paginated(): void
    {
        $response = $this->get('/api/vulnerabilities')->assertStatus(Response::HTTP_OK);
        $this->assertEquals(Vulnerability::query()->take(10)->get()->toArray(),$response->json()['data']);
    }

    public function test_it_should_show_specific_vulnerability(): void
    {
        $vulnerability = Vulnerability::query()->first();
        $response = $this->get('/api/vulnerabilities/'.$vulnerability->id)->assertStatus(Response::HTTP_OK);
        $this->assertEquals($vulnerability->toArray(),$response->json()['data']);
    }

    public function test_it_should_show_404_if_vulnerability_not_found_on_show(): void
    {
        $this->get('/api/vulnerabilities/0')->assertStatus(Response::HTTP_NOT_FOUND);
    }

    public function test_it_should_delete_specific_vulnerability(): void
    {
        $vulnerability = Vulnerability::query()->first();
        $response = $this->delete('/api/vulnerabilities/'.$vulnerability->id)->assertStatus(Response::HTTP_OK);
        $this->assertEquals('Vulnerability deleted!',$response->json()['data']);
        $this->assertEquals(9, Vulnerability::query()->count());
        $this->assertEquals(null, Vulnerability::query()->where('title', $vulnerability->title)->first());
    }

    public function test_it_should_show_404_if_vulnerability_not_found_on_delete(): void
    {
        $this->delete('/api/vulnerabilities/0')->assertStatus(Response::HTTP_NOT_FOUND);
    }
}
